#!/usr/bin/env ruby
# frozen-string-literal: true

=begin imvnl
Copyright (c) 2018, 2024, Daniel SierpiÅ„ski All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
=end

require 'readline'
require 'mvinl/context'
require 'mvinl/lexer'
require 'mvinl/parser'
require 'mvinl/info'

module MVinl::REPL
  PSL = "mvnl(#{MVinl::Version})".freeze
  PS1 = "#{PSL}>".freeze
  HISTORY_FILE = File.expand_path('.imvnl_history')
  CONTEXT = MVinl::Context.new
  LEXER = MVinl::Lexer.new(CONTEXT, '')
  PARSER = MVinl::Parser.new(LEXER, CONTEXT)

  def self.run
    load_history

    while (input = Readline.readline("#{PS1} ", true))
      if Readline::HISTORY.size > 1 && Readline::HISTORY[-1] == Readline::HISTORY[-2]
        Readline::HISTORY.pop
      end

      if ['^', 'exit'].include? input
        PARSER.finalize!
        break if PARSER.parsing_done?
      else
        LEXER.feed input
      end

      begin
        out = PARSER.parse
        print '=> '
        pp out
      rescue MVinl::LexerError => e
        warn e.message
      rescue MVinl::ParserError => e
        warn e.message
      rescue Racc::ParseError => e
        warn e.message
      end
    end

    save_history
  end

  private_class_method def self.load_history
    return unless File.exist? HISTORY_FILE

    File.foreach(HISTORY_FILE) do |line|
      Readline::HISTORY << line.chomp
    end
  end

  private_class_method def self.save_history
    File.open(HISTORY_FILE, 'w') do |file|
      Readline::HISTORY.each { |entry| file.puts(entry) }
    end
  end
end

MVinl::REPL.run
